from aiogram.types import Message
from aiogram import Router,types
from services.database import get_expenses,get_incomes,detailed_incomes,detailed_expenses
from keyboards.stats_button import continue_bt_stats
from keyboards.main_menu import main_menu_kb


router = Router()

@router.message(lambda message:message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" )
async def get_stats(message:Message):
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",reply_markup=continue_bt_stats())

@router.message(lambda message:message.text == "üìà –í—Å–µ –¥–æ—Ö–æ–¥—ã")
async def get_detailed_stats_incomes(message:Message):
    user_id = message.from_user.id
    rows_incomes = await detailed_incomes(user_id)
    result_message = "–í—Å–µ –≤–∞—à–∏ –î–æ—Ö–æ–¥—ã:\n\n"
    for category,sum_income,date in rows_incomes:
        result_message += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}:{sum_income} —Ä—É–±. –î–∞—Ç–∞ –¥–æ—Ö–æ–¥–∞: {date}\n"
    await message.answer(result_message)

@router.message(lambda message:message.text == "üìâ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def get_detailed_stats_expenses(message:Message):
    user_id = message.from_user.id
    rows_expenses = await detailed_expenses(user_id)
    result_message = "–í—Å–µ –≤–∞—à–∏ –†–∞—Å—Ö–æ–¥—ã:\n\n"
    for category,sum_expens,date in rows_expenses:
        result_message += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}:{sum_expens} —Ä—É–±. –î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞: {date}\n"
    await message.answer(result_message)

@router.message(lambda message:message.text == "üíµ –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def get_sum_incomes(message:Message):
    user_id = message.from_user.id
    incomes = await get_incomes(user_id)
    result_message = "–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –ø–æ –∫–æ—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for category,sum_incomes in incomes:
        result_message += f"\n-–ö–∞—Ç–µ–≥–æ—Ä–∏—è:{category}:{sum_incomes} —Ä—É–±."
    await message.answer(result_message)

@router.message(lambda message:message.text == "üõí –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def get_sum_expenses(message:Message):
    user_id = message.from_user.id
    expenses = await get_expenses(user_id)
    result_message = "–°—É–º–º–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –∫–æ—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for category,sum_expenses in expenses:
        result_message += f"\n-–ö–∞—Ç–µ–≥–æ—Ä–∏—è:{category}:{sum_expenses} —Ä—É–±."
    await message.answer(result_message)


@router.message(lambda message:message.text == "üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å")
async def use_balance(message:types.Message):
    user_id = message.from_user.id
    incomes = await get_incomes(user_id)
    expenses = await get_expenses(user_id)
    user_balance = 0
    for categories_incomes,sum_incomes in incomes:
        user_balance += sum_incomes
    for categories_expenses,sum_expenses in expenses:
        user_balance -= sum_expenses
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å:{user_balance} —Ä—É–±.")

@router.message(lambda message:message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_main_menu(message:Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",reply_markup=main_menu_kb())




