from aiogram import Router,types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup,State
from keyboards.categories import catogories_income_button
from keyboards.continue_add import continue_add
from keyboards.main_menu import main_menu_kb
from services.database import add_income  


class Income(StatesGroup):
    waiting_income = State()
    waiting_process_income = State()
    continueadd_income = State()


router = Router()

@router.message(lambda message:message.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income_handler(message:types.Message,state:FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é:",reply_markup=catogories_income_button())
    await state.set_state(Income.waiting_income)

@router.message(Income.waiting_income)
async def select_catigory_income(message:Message,state:FSMContext):
    category_text_income = message.text
    await state.update_data(category = category_text_income)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞")
    await state.set_state(Income.waiting_process_income)

@router.message(Income.waiting_process_income)
async def process_income(message:Message,state:FSMContext):
    user_data = await state.get_data()
    category_text_income = user_data.get("category")
    sum_income = message.text
    await add_income(message.from_user.id, category_text_income, sum_income) 
    if message.text.isdigit():  
        await message.answer(f"–î–æ—Ö–æ–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_text_income}:  –Ω–∞ —Å—É–º–º—É {sum_income} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await message.answer("üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –¥–æ—Ö–æ–¥?",reply_markup=continue_add())
        await state.set_state(Income.continueadd_income)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        await state.set_state(Income.waiting_process_income)

@router.message(Income.continueadd_income)
async def continueadd_income(message:Message,state:FSMContext):
    if message.text == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
        await add_income_handler(message,state)
    elif message.text == "‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",reply_markup=main_menu_kb())
        await state.clear()