from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup,State
from keyboards.categories import categories_expenses_button
from keyboards.continue_add import continue_add
from keyboards.main_menu import main_menu_kb
from services.database import add_expense 

class Expenses(StatesGroup):
    waiting_expensens = State()
    waiting_amout = State()
    continue_expens = State()


router = Router()

@router.message(lambda message:message.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense_handler(message:Message,state:FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é:",reply_markup=categories_expenses_button())
    await state.set_state(Expenses.waiting_expensens)

@router.message(Expenses.waiting_expensens)
async def select_category(message:Message,state:FSMContext):
    category_text = message.text   
    await state.update_data(category=category_text)  
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞")
    await state.set_state(Expenses.waiting_amout)

@router.message(Expenses.waiting_amout)
async def process_expense(message:Message,state:FSMContext,):
    user_data = await state.get_data()  
    category_text = user_data.get('category')   
    sum_expenses = message.text
    await add_expense(message.from_user.id, category_text, sum_expenses) 
    if sum_expenses.isdigit():
        await message.answer(f"–†–∞—Å—Ö–æ–¥ –Ω–∞ {category_text}: {sum_expenses} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await message.answer("üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—Å—Ö–æ–¥?",reply_markup=continue_add())
        await state.set_state(Expenses.continue_expens)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        await state.set_state(Expenses.waiting_amout)

@router.message(Expenses.continue_expens)
async def continueadd_exp(message:Message,state:FSMContext):
    if message.text == "‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë":
       await add_expense_handler(message,state)
    elif message.text == "‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å":
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",reply_markup=main_menu_kb())
        await state.clear()
    
      
